{"version":3,"sources":["component/Header.js","component/Mapca.js","component/Infoip.js","App.js","reportWebVitals.js","index.js"],"names":["Header","clickEvenet","Msg","useState","ip","setIp","className","type","placeholder","onChange","e","target","value","onClick","src","alt","Mapca","p","t","infoIp","posi","setPosi","useEffect","test","a","location","lng","lat","MapContainer","center","zoom","TileLayer","attribution","url","Marker","position","Popup","city","Infoip","region","country","timezone","isp","App","ErorMsg","setMsg","ipinfo","setIpinfo","getIpDa","fetch","res","json","data","console","log","IP","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74deb6fd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Header = ({clickEvenet,Msg}) => {\r\nconst [ip,setIp]=useState(\"\");\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n            <h1>IP address Tracher</h1>\r\n            <div className=\"SearchBar\">\r\n                <input className=\"search\" type=\"text\" placeholder=\"Search for any IP address or domain\" onChange={(e)=>{setIp(e.target.value)}} />\r\n                \r\n                <button className=\"btn\" onClick={(e)=>{clickEvenet(ip)}}><img className=\"btnIcon\" src=\"images/icon-arrow.svg\" alt=\"right arrow\"/></button>\r\n            </div>\r\n            {Msg &&<h4 className=\"msgEr\">Ip not valid correct IPv4 or IPv6 address.</h4>}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\n\r\nconst Mapca = ({ infoIp }) => {\r\n  const [posi, setPosi] = useState([40.50,34.34]);\r\nlet p,t;\r\n  useEffect(() => {\r\n    const test = async () => {\r\n      if (infoIp) {\r\n        p = await infoIp.location.lng;\r\n        t= await infoIp.location.lat;\r\n        setPosi([t,p]);\r\n      }\r\n\r\n    }\r\n    test();\r\n  }, [infoIp]);\r\n  return (\r\n    <MapContainer center={posi} zoom={3}>\r\n\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\r\n      <Marker position={posi}>\r\n        <Popup>\r\n        {infoIp&&infoIp.location.city } <br /> {infoIp&&infoIp.ip}\r\n        </Popup>\r\n      </Marker>\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Mapca;\r\n","import React from \"react\";\r\n\r\n\r\nconst Infoip = ({infoIp}) => {\r\n  return (\r\n    <section className=\"info\">\r\n      <div>\r\n        <h4>IP address</h4>\r\n        <p>{infoIp && infoIp.ip}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Location</h4>\r\n        <p className=\"loca\">\r\n        {infoIp && infoIp.location.city}{\" \"}\r\n        {infoIp && infoIp.location.region}{\" , \"}\r\n        {infoIp && infoIp.location.country}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h4>timezone</h4>\r\n        <p>{infoIp && infoIp.location.timezone}</p>\r\n      </div>\r\n      <div className=\"last\">\r\n        <h4>isp</h4>\r\n        <p>{infoIp && infoIp.isp}</p>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Infoip;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"./component/Header\";\nimport Mapca from \"./component/Mapca\";\nimport Infoip from \"./component/Infoip\";\n\nfunction App() {\n  const [ErorMsg, setMsg] = useState(false);\n  const [ipinfo, setIpinfo] = useState();\n  const [ip, setIp] = useState('');\n  \n\n  useEffect(() => {\n    const getIpDa = async(ip)=>{\n    const res = await fetch(\n      `https://geo.ipify.org/api/v1?apiKey=at_v95pwGe8qaQ0OLg7sXV1YjbAHRT7X&ipAddress=${ip}`\n    );\n    const data = await res.json();\n    console.log(data);\n    setIpinfo(data);\n    setMsg(false);\n    }\n    getIpDa(ip);\n  }, [ip]);\n\n  const ipData = (IP) => {\n    \n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(IP)) {  \n      setIp(IP); \n    }\n    else{\n      setMsg(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header clickEvenet={ipData} Msg={ErorMsg} />\n      <Infoip infoIp={ipinfo}/>\n      <Mapca infoIp={ipinfo}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>\n    \n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}